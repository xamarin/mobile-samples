// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace WebServices.RxNormSample.rxnav.nlm.nih.gov {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="RxNormDBService", Namespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBManagerService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback closeOperationCompleted;
        
        private System.Threading.SendOrPostCallback approxMatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDisplayTermsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRxNormVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUMLSVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSpellingSuggestionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback findRxcuiByStringOperationCompleted;
        
//        private System.Threading.SendOrPostCallback findRxcuiByStringOperationCompleted;
        
//        private System.Threading.SendOrPostCallback findRxcuiByStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProprietaryInformationOperationCompleted;
        
//        private System.Threading.SendOrPostCallback getProprietaryInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback findRxcuiByIdOperationCompleted;
        
//        private System.Threading.SendOrPostCallback findRxcuiByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRxConceptPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRelatedByRelationshipOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRelatedByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllRelatedInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMultiIngredBrandOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDrugsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNDCsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getQuantityOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUNIIOperationCompleted;
        
        private System.Threading.SendOrPostCallback getStrengthOperationCompleted;
        
        private System.Threading.SendOrPostCallback getIdTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRelaTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTermTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSplSetIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback findRemappedOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSourceTypesOperationCompleted;
        
        public DBManagerService() {
            this.Url = "http://mor.nlm.nih.gov/axis/services/RxNormDBService";
        }
        
        public DBManagerService(string url) {
            this.Url = url;
        }
        
        public event closeCompletedEventHandler closeCompleted;
        
        public event approxMatchCompletedEventHandler approxMatchCompleted;
        
        public event getDisplayTermsCompletedEventHandler getDisplayTermsCompleted;
        
        public event getRxNormVersionCompletedEventHandler getRxNormVersionCompleted;
        
        public event getUMLSVersionCompletedEventHandler getUMLSVersionCompleted;
        
        public event getSpellingSuggestionsCompletedEventHandler getSpellingSuggestionsCompleted;
        
        public event findRxcuiByStringCompletedEventHandler findRxcuiByStringCompleted;
        
//        public event findRxcuiByStringCompletedEventHandler findRxcuiByStringCompleted;
        
//        public event findRxcuiByStringCompletedEventHandler findRxcuiByStringCompleted;
        
        public event getProprietaryInformationCompletedEventHandler getProprietaryInformationCompleted;
        
//        public event getProprietaryInformationCompletedEventHandler getProprietaryInformationCompleted;
        
        public event findRxcuiByIdCompletedEventHandler findRxcuiByIdCompleted;
        
//        public event findRxcuiByIdCompletedEventHandler findRxcuiByIdCompleted;
        
        public event getRxConceptPropertiesCompletedEventHandler getRxConceptPropertiesCompleted;
        
        public event getRelatedByRelationshipCompletedEventHandler getRelatedByRelationshipCompleted;
        
        public event getRelatedByTypeCompletedEventHandler getRelatedByTypeCompleted;
        
        public event getAllRelatedInfoCompletedEventHandler getAllRelatedInfoCompleted;
        
        public event getMultiIngredBrandCompletedEventHandler getMultiIngredBrandCompleted;
        
        public event getDrugsCompletedEventHandler getDrugsCompleted;
        
        public event getNDCsCompletedEventHandler getNDCsCompleted;
        
        public event getQuantityCompletedEventHandler getQuantityCompleted;
        
        public event getUNIICompletedEventHandler getUNIICompleted;
        
        public event getStrengthCompletedEventHandler getStrengthCompleted;
        
        public event getIdTypesCompletedEventHandler getIdTypesCompleted;
        
        public event getRelaTypesCompletedEventHandler getRelaTypesCompleted;
        
        public event getTermTypesCompletedEventHandler getTermTypesCompleted;
        
        public event getSplSetIdCompletedEventHandler getSplSetIdCompleted;
        
        public event findRemappedCompletedEventHandler findRemappedCompleted;
        
        public event getSourceTypesCompletedEventHandler getSourceTypesCompleted;
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        public void close() {
            this.Invoke("close", new object[0]);
        }
        
        public System.IAsyncResult Beginclose(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("close", new object[0], callback, asyncState);
        }
        
        public void Endclose(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void closeAsync() {
            this.closeAsync(null);
        }
        
        public void closeAsync(object userState) {
            if ((this.closeOperationCompleted == null)) {
                this.closeOperationCompleted = new System.Threading.SendOrPostCallback(this.OncloseCompleted);
            }
            this.InvokeAsync("close", new object[0], this.closeOperationCompleted, userState);
        }
        
        private void OncloseCompleted(object arg) {
            if ((this.closeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.closeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mordev2.nlm.nih.gov:8080/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("approxMatchReturn")]
        public RxMatchInfo[] approxMatch(string term) {
            object[] results = this.Invoke("approxMatch", new object[] {
                        term});
            return ((RxMatchInfo[])(results[0]));
        }
        
        public System.IAsyncResult BeginapproxMatch(string term, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("approxMatch", new object[] {
                        term}, callback, asyncState);
        }
        
        public RxMatchInfo[] EndapproxMatch(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RxMatchInfo[])(results[0]));
        }
        
        public void approxMatchAsync(string term) {
            this.approxMatchAsync(term, null);
        }
        
        public void approxMatchAsync(string term, object userState) {
            if ((this.approxMatchOperationCompleted == null)) {
                this.approxMatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnapproxMatchCompleted);
            }
            this.InvokeAsync("approxMatch", new object[] {
                        term}, this.approxMatchOperationCompleted, userState);
        }
        
        private void OnapproxMatchCompleted(object arg) {
            if ((this.approxMatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.approxMatchCompleted(this, new approxMatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getDisplayTermsReturn")]
        public string[] getDisplayTerms() {
            object[] results = this.Invoke("getDisplayTerms", new object[0]);
            return ((string[])(results[0]));
        }
        
        public System.IAsyncResult BegingetDisplayTerms(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getDisplayTerms", new object[0], callback, asyncState);
        }
        
        public string[] EndgetDisplayTerms(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        public void getDisplayTermsAsync() {
            this.getDisplayTermsAsync(null);
        }
        
        public void getDisplayTermsAsync(object userState) {
            if ((this.getDisplayTermsOperationCompleted == null)) {
                this.getDisplayTermsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDisplayTermsCompleted);
            }
            this.InvokeAsync("getDisplayTerms", new object[0], this.getDisplayTermsOperationCompleted, userState);
        }
        
        private void OngetDisplayTermsCompleted(object arg) {
            if ((this.getDisplayTermsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDisplayTermsCompleted(this, new getDisplayTermsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getRxNormVersionReturn")]
        public string getRxNormVersion() {
            object[] results = this.Invoke("getRxNormVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BegingetRxNormVersion(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getRxNormVersion", new object[0], callback, asyncState);
        }
        
        public string EndgetRxNormVersion(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void getRxNormVersionAsync() {
            this.getRxNormVersionAsync(null);
        }
        
        public void getRxNormVersionAsync(object userState) {
            if ((this.getRxNormVersionOperationCompleted == null)) {
                this.getRxNormVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRxNormVersionCompleted);
            }
            this.InvokeAsync("getRxNormVersion", new object[0], this.getRxNormVersionOperationCompleted, userState);
        }
        
        private void OngetRxNormVersionCompleted(object arg) {
            if ((this.getRxNormVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRxNormVersionCompleted(this, new getRxNormVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getUMLSVersionReturn")]
        public string getUMLSVersion() {
            object[] results = this.Invoke("getUMLSVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BegingetUMLSVersion(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getUMLSVersion", new object[0], callback, asyncState);
        }
        
        public string EndgetUMLSVersion(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void getUMLSVersionAsync() {
            this.getUMLSVersionAsync(null);
        }
        
        public void getUMLSVersionAsync(object userState) {
            if ((this.getUMLSVersionOperationCompleted == null)) {
                this.getUMLSVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUMLSVersionCompleted);
            }
            this.InvokeAsync("getUMLSVersion", new object[0], this.getUMLSVersionOperationCompleted, userState);
        }
        
        private void OngetUMLSVersionCompleted(object arg) {
            if ((this.getUMLSVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUMLSVersionCompleted(this, new getUMLSVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getSpellingSuggestionsReturn")]
        public string[] getSpellingSuggestions(string term) {
            object[] results = this.Invoke("getSpellingSuggestions", new object[] {
                        term});
            return ((string[])(results[0]));
        }
        
        public System.IAsyncResult BegingetSpellingSuggestions(string term, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getSpellingSuggestions", new object[] {
                        term}, callback, asyncState);
        }
        
        public string[] EndgetSpellingSuggestions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        public void getSpellingSuggestionsAsync(string term) {
            this.getSpellingSuggestionsAsync(term, null);
        }
        
        public void getSpellingSuggestionsAsync(string term, object userState) {
            if ((this.getSpellingSuggestionsOperationCompleted == null)) {
                this.getSpellingSuggestionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSpellingSuggestionsCompleted);
            }
            this.InvokeAsync("getSpellingSuggestions", new object[] {
                        term}, this.getSpellingSuggestionsOperationCompleted, userState);
        }
        
        private void OngetSpellingSuggestionsCompleted(object arg) {
            if ((this.getSpellingSuggestionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSpellingSuggestionsCompleted(this, new getSpellingSuggestionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("findRxcuiByStringReturn")]
        public string[] findRxcuiByString(string term) {
            object[] results = this.Invoke("findRxcuiByString", new object[] {
                        term});
            return ((string[])(results[0]));
        }
        
        public System.IAsyncResult BeginfindRxcuiByString(string term, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("findRxcuiByString", new object[] {
                        term}, callback, asyncState);
        }
        
        public string[] EndfindRxcuiByString(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        public void findRxcuiByStringAsync(string term) {
            this.findRxcuiByStringAsync(term, null);
        }
        
        public void findRxcuiByStringAsync(string term, object userState) {
            if ((this.findRxcuiByStringOperationCompleted == null)) {
                this.findRxcuiByStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindRxcuiByStringCompleted);
            }
            this.InvokeAsync("findRxcuiByString", new object[] {
                        term}, this.findRxcuiByStringOperationCompleted, userState);
        }
        
        private void OnfindRxcuiByStringCompleted(object arg) {
            if ((this.findRxcuiByStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.findRxcuiByStringCompleted(this, new findRxcuiByStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.WebMethodAttribute(MessageName="findRxcuiByString1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("findRxcuiByStringReturn")]
        public string[] findRxcuiByString(string term, string[] sources, int allSourcesFlag) {
            object[] results = this.Invoke("findRxcuiByString1", new object[] {
                        term,
                        sources,
                        allSourcesFlag});
            return ((string[])(results[0]));
        }
        
        public System.IAsyncResult BeginfindRxcuiByString1(string term, string[] sources, int allSourcesFlag, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("findRxcuiByString1", new object[] {
                        term,
                        sources,
                        allSourcesFlag}, callback, asyncState);
        }
        
        public string[] EndfindRxcuiByString1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        public void findRxcuiByStringAsync(string term, string[] sources, int allSourcesFlag) {
            this.findRxcuiByStringAsync(term, sources, allSourcesFlag, null);
        }
        
        public void findRxcuiByStringAsync(string term, string[] sources, int allSourcesFlag, object userState) {
            if ((this.findRxcuiByStringOperationCompleted == null)) {
                this.findRxcuiByStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindRxcuiByStringCompleted);
            }
            this.InvokeAsync("findRxcuiByString", new object[] {
                        term,
                        sources,
                        allSourcesFlag}, this.findRxcuiByStringOperationCompleted, userState);
        }
        
//        private void OnfindRxcuiByStringCompleted(object arg) {
//            if ((this.findRxcuiByStringCompleted != null)) {
//                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
//                this.findRxcuiByStringCompleted(this, new findRxcuiByStringCompletedEventArgs1(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
//            }
//        }
        
        [System.Web.Services.WebMethodAttribute(MessageName="findRxcuiByString2")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("findRxcuiByStringReturn")]
        public string[] findRxcuiByString(string term, string[] sources, int allSourcesFlag, int matchType) {
            object[] results = this.Invoke("findRxcuiByString2", new object[] {
                        term,
                        sources,
                        allSourcesFlag,
                        matchType});
            return ((string[])(results[0]));
        }
        
        public System.IAsyncResult BeginfindRxcuiByString2(string term, string[] sources, int allSourcesFlag, int matchType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("findRxcuiByString2", new object[] {
                        term,
                        sources,
                        allSourcesFlag,
                        matchType}, callback, asyncState);
        }
        
        public string[] EndfindRxcuiByString2(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        public void findRxcuiByStringAsync(string term, string[] sources, int allSourcesFlag, int matchType) {
            this.findRxcuiByStringAsync(term, sources, allSourcesFlag, matchType, null);
        }
        
        public void findRxcuiByStringAsync(string term, string[] sources, int allSourcesFlag, int matchType, object userState) {
            if ((this.findRxcuiByStringOperationCompleted == null)) {
                this.findRxcuiByStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindRxcuiByStringCompleted);
            }
            this.InvokeAsync("findRxcuiByString", new object[] {
                        term,
                        sources,
                        allSourcesFlag,
                        matchType}, this.findRxcuiByStringOperationCompleted, userState);
        }
        
//        private void OnfindRxcuiByStringCompleted(object arg) {
//            if ((this.findRxcuiByStringCompleted != null)) {
//                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
//                this.findRxcuiByStringCompleted(this, new findRxcuiByStringCompletedEventArgs2(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
//            }
//        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getProprietaryInformationReturn")]
        public RxTermInfo[] getProprietaryInformation(string rxcui, string[] sources, string proxyTicket) {
            object[] results = this.Invoke("getProprietaryInformation", new object[] {
                        rxcui,
                        sources,
                        proxyTicket});
            return ((RxTermInfo[])(results[0]));
        }
        
        public System.IAsyncResult BegingetProprietaryInformation(string rxcui, string[] sources, string proxyTicket, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getProprietaryInformation", new object[] {
                        rxcui,
                        sources,
                        proxyTicket}, callback, asyncState);
        }
        
        public RxTermInfo[] EndgetProprietaryInformation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RxTermInfo[])(results[0]));
        }
        
        public void getProprietaryInformationAsync(string rxcui, string[] sources, string proxyTicket) {
            this.getProprietaryInformationAsync(rxcui, sources, proxyTicket, null);
        }
        
        public void getProprietaryInformationAsync(string rxcui, string[] sources, string proxyTicket, object userState) {
            if ((this.getProprietaryInformationOperationCompleted == null)) {
                this.getProprietaryInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProprietaryInformationCompleted);
            }
            this.InvokeAsync("getProprietaryInformation", new object[] {
                        rxcui,
                        sources,
                        proxyTicket}, this.getProprietaryInformationOperationCompleted, userState);
        }
        
        private void OngetProprietaryInformationCompleted(object arg) {
            if ((this.getProprietaryInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProprietaryInformationCompleted(this, new getProprietaryInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.WebMethodAttribute(MessageName="getProprietaryInformation1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mordev2.nlm.nih.gov:8080/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getProprietaryInformationReturn")]
        public RxTermInfo[] getProprietaryInformation(string rxcui, string[] sources, string proxyTicket, string rxaui) {
            object[] results = this.Invoke("getProprietaryInformation1", new object[] {
                        rxcui,
                        sources,
                        proxyTicket,
                        rxaui});
            return ((RxTermInfo[])(results[0]));
        }
        
        public System.IAsyncResult BegingetProprietaryInformation1(string rxcui, string[] sources, string proxyTicket, string rxaui, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getProprietaryInformation1", new object[] {
                        rxcui,
                        sources,
                        proxyTicket,
                        rxaui}, callback, asyncState);
        }
        
        public RxTermInfo[] EndgetProprietaryInformation1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RxTermInfo[])(results[0]));
        }
        
        public void getProprietaryInformationAsync(string rxcui, string[] sources, string proxyTicket, string rxaui) {
            this.getProprietaryInformationAsync(rxcui, sources, proxyTicket, rxaui, null);
        }
        
        public void getProprietaryInformationAsync(string rxcui, string[] sources, string proxyTicket, string rxaui, object userState) {
            if ((this.getProprietaryInformationOperationCompleted == null)) {
                this.getProprietaryInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProprietaryInformationCompleted);
            }
            this.InvokeAsync("getProprietaryInformation", new object[] {
                        rxcui,
                        sources,
                        proxyTicket,
                        rxaui}, this.getProprietaryInformationOperationCompleted, userState);
        }
        
//        private void OngetProprietaryInformationCompleted(object arg) {
//            if ((this.getProprietaryInformationCompleted != null)) {
//                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
//                this.getProprietaryInformationCompleted(this, new getProprietaryInformationCompletedEventArgs1(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
//            }
//        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("findRxcuiByIdReturn")]
        public string[] findRxcuiById(string idType, string id) {
            object[] results = this.Invoke("findRxcuiById", new object[] {
                        idType,
                        id});
            return ((string[])(results[0]));
        }
        
        public System.IAsyncResult BeginfindRxcuiById(string idType, string id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("findRxcuiById", new object[] {
                        idType,
                        id}, callback, asyncState);
        }
        
        public string[] EndfindRxcuiById(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        public void findRxcuiByIdAsync(string idType, string id) {
            this.findRxcuiByIdAsync(idType, id, null);
        }
        
        public void findRxcuiByIdAsync(string idType, string id, object userState) {
            if ((this.findRxcuiByIdOperationCompleted == null)) {
                this.findRxcuiByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindRxcuiByIdCompleted);
            }
            this.InvokeAsync("findRxcuiById", new object[] {
                        idType,
                        id}, this.findRxcuiByIdOperationCompleted, userState);
        }
        
        private void OnfindRxcuiByIdCompleted(object arg) {
            if ((this.findRxcuiByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.findRxcuiByIdCompleted(this, new findRxcuiByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.WebMethodAttribute(MessageName="findRxcuiById1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("findRxcuiByIdReturn")]
        public string[] findRxcuiById(string idType, string id, int allSourcesFlag) {
            object[] results = this.Invoke("findRxcuiById1", new object[] {
                        idType,
                        id,
                        allSourcesFlag});
            return ((string[])(results[0]));
        }
        
        public System.IAsyncResult BeginfindRxcuiById1(string idType, string id, int allSourcesFlag, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("findRxcuiById1", new object[] {
                        idType,
                        id,
                        allSourcesFlag}, callback, asyncState);
        }
        
        public string[] EndfindRxcuiById1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        public void findRxcuiByIdAsync(string idType, string id, int allSourcesFlag) {
            this.findRxcuiByIdAsync(idType, id, allSourcesFlag, null);
        }
        
        public void findRxcuiByIdAsync(string idType, string id, int allSourcesFlag, object userState) {
            if ((this.findRxcuiByIdOperationCompleted == null)) {
                this.findRxcuiByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindRxcuiByIdCompleted);
            }
            this.InvokeAsync("findRxcuiById", new object[] {
                        idType,
                        id,
                        allSourcesFlag}, this.findRxcuiByIdOperationCompleted, userState);
        }
        
//        private void OnfindRxcuiByIdCompleted(object arg) {
//            if ((this.findRxcuiByIdCompleted != null)) {
//                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
//                this.findRxcuiByIdCompleted(this, new findRxcuiByIdCompletedEventArgs1(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
//            }
//        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getRxConceptPropertiesReturn")]
        public RxConcept getRxConceptProperties(string rxcui) {
            object[] results = this.Invoke("getRxConceptProperties", new object[] {
                        rxcui});
            return ((RxConcept)(results[0]));
        }
        
        public System.IAsyncResult BegingetRxConceptProperties(string rxcui, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getRxConceptProperties", new object[] {
                        rxcui}, callback, asyncState);
        }
        
        public RxConcept EndgetRxConceptProperties(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RxConcept)(results[0]));
        }
        
        public void getRxConceptPropertiesAsync(string rxcui) {
            this.getRxConceptPropertiesAsync(rxcui, null);
        }
        
        public void getRxConceptPropertiesAsync(string rxcui, object userState) {
            if ((this.getRxConceptPropertiesOperationCompleted == null)) {
                this.getRxConceptPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRxConceptPropertiesCompleted);
            }
            this.InvokeAsync("getRxConceptProperties", new object[] {
                        rxcui}, this.getRxConceptPropertiesOperationCompleted, userState);
        }
        
        private void OngetRxConceptPropertiesCompleted(object arg) {
            if ((this.getRxConceptPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRxConceptPropertiesCompleted(this, new getRxConceptPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getRelatedByRelationshipReturn")]
        public RxConceptGroup[] getRelatedByRelationship(string rxcui, string[] rela_list) {
            object[] results = this.Invoke("getRelatedByRelationship", new object[] {
                        rxcui,
                        rela_list});
            return ((RxConceptGroup[])(results[0]));
        }
        
        public System.IAsyncResult BegingetRelatedByRelationship(string rxcui, string[] rela_list, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getRelatedByRelationship", new object[] {
                        rxcui,
                        rela_list}, callback, asyncState);
        }
        
        public RxConceptGroup[] EndgetRelatedByRelationship(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RxConceptGroup[])(results[0]));
        }
        
        public void getRelatedByRelationshipAsync(string rxcui, string[] rela_list) {
            this.getRelatedByRelationshipAsync(rxcui, rela_list, null);
        }
        
        public void getRelatedByRelationshipAsync(string rxcui, string[] rela_list, object userState) {
            if ((this.getRelatedByRelationshipOperationCompleted == null)) {
                this.getRelatedByRelationshipOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRelatedByRelationshipCompleted);
            }
            this.InvokeAsync("getRelatedByRelationship", new object[] {
                        rxcui,
                        rela_list}, this.getRelatedByRelationshipOperationCompleted, userState);
        }
        
        private void OngetRelatedByRelationshipCompleted(object arg) {
            if ((this.getRelatedByRelationshipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRelatedByRelationshipCompleted(this, new getRelatedByRelationshipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getRelatedByTypeReturn")]
        public RxConceptGroup[] getRelatedByType(string rxcui, string[] termType_list) {
            object[] results = this.Invoke("getRelatedByType", new object[] {
                        rxcui,
                        termType_list});
            return ((RxConceptGroup[])(results[0]));
        }
        
        public System.IAsyncResult BegingetRelatedByType(string rxcui, string[] termType_list, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getRelatedByType", new object[] {
                        rxcui,
                        termType_list}, callback, asyncState);
        }
        
        public RxConceptGroup[] EndgetRelatedByType(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RxConceptGroup[])(results[0]));
        }
        
        public void getRelatedByTypeAsync(string rxcui, string[] termType_list) {
            this.getRelatedByTypeAsync(rxcui, termType_list, null);
        }
        
        public void getRelatedByTypeAsync(string rxcui, string[] termType_list, object userState) {
            if ((this.getRelatedByTypeOperationCompleted == null)) {
                this.getRelatedByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRelatedByTypeCompleted);
            }
            this.InvokeAsync("getRelatedByType", new object[] {
                        rxcui,
                        termType_list}, this.getRelatedByTypeOperationCompleted, userState);
        }
        
        private void OngetRelatedByTypeCompleted(object arg) {
            if ((this.getRelatedByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRelatedByTypeCompleted(this, new getRelatedByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getAllRelatedInfoReturn")]
        public RxConceptGroup[] getAllRelatedInfo(string rxcui) {
            object[] results = this.Invoke("getAllRelatedInfo", new object[] {
                        rxcui});
            return ((RxConceptGroup[])(results[0]));
        }
        
        public System.IAsyncResult BegingetAllRelatedInfo(string rxcui, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getAllRelatedInfo", new object[] {
                        rxcui}, callback, asyncState);
        }
        
        public RxConceptGroup[] EndgetAllRelatedInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RxConceptGroup[])(results[0]));
        }
        
        public void getAllRelatedInfoAsync(string rxcui) {
            this.getAllRelatedInfoAsync(rxcui, null);
        }
        
        public void getAllRelatedInfoAsync(string rxcui, object userState) {
            if ((this.getAllRelatedInfoOperationCompleted == null)) {
                this.getAllRelatedInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllRelatedInfoCompleted);
            }
            this.InvokeAsync("getAllRelatedInfo", new object[] {
                        rxcui}, this.getAllRelatedInfoOperationCompleted, userState);
        }
        
        private void OngetAllRelatedInfoCompleted(object arg) {
            if ((this.getAllRelatedInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllRelatedInfoCompleted(this, new getAllRelatedInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getMultiIngredBrandReturn")]
        public RxConcept[] getMultiIngredBrand(string[] ids) {
            object[] results = this.Invoke("getMultiIngredBrand", new object[] {
                        ids});
            return ((RxConcept[])(results[0]));
        }
        
        public System.IAsyncResult BegingetMultiIngredBrand(string[] ids, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getMultiIngredBrand", new object[] {
                        ids}, callback, asyncState);
        }
        
        public RxConcept[] EndgetMultiIngredBrand(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RxConcept[])(results[0]));
        }
        
        public void getMultiIngredBrandAsync(string[] ids) {
            this.getMultiIngredBrandAsync(ids, null);
        }
        
        public void getMultiIngredBrandAsync(string[] ids, object userState) {
            if ((this.getMultiIngredBrandOperationCompleted == null)) {
                this.getMultiIngredBrandOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMultiIngredBrandCompleted);
            }
            this.InvokeAsync("getMultiIngredBrand", new object[] {
                        ids}, this.getMultiIngredBrandOperationCompleted, userState);
        }
        
        private void OngetMultiIngredBrandCompleted(object arg) {
            if ((this.getMultiIngredBrandCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMultiIngredBrandCompleted(this, new getMultiIngredBrandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getDrugsReturn")]
        public RxConceptGroup[] getDrugs(string name) {
            object[] results = this.Invoke("getDrugs", new object[] {
                        name});
            return ((RxConceptGroup[])(results[0]));
        }
        
        public System.IAsyncResult BegingetDrugs(string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getDrugs", new object[] {
                        name}, callback, asyncState);
        }
        
        public RxConceptGroup[] EndgetDrugs(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RxConceptGroup[])(results[0]));
        }
        
        public void getDrugsAsync(string name) {
            this.getDrugsAsync(name, null);
        }
        
        public void getDrugsAsync(string name, object userState) {
            if ((this.getDrugsOperationCompleted == null)) {
                this.getDrugsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDrugsCompleted);
            }
            this.InvokeAsync("getDrugs", new object[] {
                        name}, this.getDrugsOperationCompleted, userState);
        }
        
        private void OngetDrugsCompleted(object arg) {
            if ((this.getDrugsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDrugsCompleted(this, new getDrugsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getNDCsReturn")]
        public string[] getNDCs(string rxcui) {
            object[] results = this.Invoke("getNDCs", new object[] {
                        rxcui});
            return ((string[])(results[0]));
        }
        
        public System.IAsyncResult BegingetNDCs(string rxcui, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getNDCs", new object[] {
                        rxcui}, callback, asyncState);
        }
        
        public string[] EndgetNDCs(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        public void getNDCsAsync(string rxcui) {
            this.getNDCsAsync(rxcui, null);
        }
        
        public void getNDCsAsync(string rxcui, object userState) {
            if ((this.getNDCsOperationCompleted == null)) {
                this.getNDCsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNDCsCompleted);
            }
            this.InvokeAsync("getNDCs", new object[] {
                        rxcui}, this.getNDCsOperationCompleted, userState);
        }
        
        private void OngetNDCsCompleted(object arg) {
            if ((this.getNDCsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNDCsCompleted(this, new getNDCsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getQuantityReturn")]
        public string getQuantity(string rxcui) {
            object[] results = this.Invoke("getQuantity", new object[] {
                        rxcui});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BegingetQuantity(string rxcui, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getQuantity", new object[] {
                        rxcui}, callback, asyncState);
        }
        
        public string EndgetQuantity(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void getQuantityAsync(string rxcui) {
            this.getQuantityAsync(rxcui, null);
        }
        
        public void getQuantityAsync(string rxcui, object userState) {
            if ((this.getQuantityOperationCompleted == null)) {
                this.getQuantityOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetQuantityCompleted);
            }
            this.InvokeAsync("getQuantity", new object[] {
                        rxcui}, this.getQuantityOperationCompleted, userState);
        }
        
        private void OngetQuantityCompleted(object arg) {
            if ((this.getQuantityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getQuantityCompleted(this, new getQuantityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getUNIIReturn")]
        public string getUNII(string rxcui) {
            object[] results = this.Invoke("getUNII", new object[] {
                        rxcui});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BegingetUNII(string rxcui, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getUNII", new object[] {
                        rxcui}, callback, asyncState);
        }
        
        public string EndgetUNII(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void getUNIIAsync(string rxcui) {
            this.getUNIIAsync(rxcui, null);
        }
        
        public void getUNIIAsync(string rxcui, object userState) {
            if ((this.getUNIIOperationCompleted == null)) {
                this.getUNIIOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUNIICompleted);
            }
            this.InvokeAsync("getUNII", new object[] {
                        rxcui}, this.getUNIIOperationCompleted, userState);
        }
        
        private void OngetUNIICompleted(object arg) {
            if ((this.getUNIICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUNIICompleted(this, new getUNIICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getStrengthReturn")]
        public string getStrength(string rxcui) {
            object[] results = this.Invoke("getStrength", new object[] {
                        rxcui});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BegingetStrength(string rxcui, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getStrength", new object[] {
                        rxcui}, callback, asyncState);
        }
        
        public string EndgetStrength(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void getStrengthAsync(string rxcui) {
            this.getStrengthAsync(rxcui, null);
        }
        
        public void getStrengthAsync(string rxcui, object userState) {
            if ((this.getStrengthOperationCompleted == null)) {
                this.getStrengthOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetStrengthCompleted);
            }
            this.InvokeAsync("getStrength", new object[] {
                        rxcui}, this.getStrengthOperationCompleted, userState);
        }
        
        private void OngetStrengthCompleted(object arg) {
            if ((this.getStrengthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getStrengthCompleted(this, new getStrengthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getIdTypesReturn")]
        public string[] getIdTypes() {
            object[] results = this.Invoke("getIdTypes", new object[0]);
            return ((string[])(results[0]));
        }
        
        public System.IAsyncResult BegingetIdTypes(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getIdTypes", new object[0], callback, asyncState);
        }
        
        public string[] EndgetIdTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        public void getIdTypesAsync() {
            this.getIdTypesAsync(null);
        }
        
        public void getIdTypesAsync(object userState) {
            if ((this.getIdTypesOperationCompleted == null)) {
                this.getIdTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetIdTypesCompleted);
            }
            this.InvokeAsync("getIdTypes", new object[0], this.getIdTypesOperationCompleted, userState);
        }
        
        private void OngetIdTypesCompleted(object arg) {
            if ((this.getIdTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getIdTypesCompleted(this, new getIdTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getRelaTypesReturn")]
        public string[] getRelaTypes() {
            object[] results = this.Invoke("getRelaTypes", new object[0]);
            return ((string[])(results[0]));
        }
        
        public System.IAsyncResult BegingetRelaTypes(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getRelaTypes", new object[0], callback, asyncState);
        }
        
        public string[] EndgetRelaTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        public void getRelaTypesAsync() {
            this.getRelaTypesAsync(null);
        }
        
        public void getRelaTypesAsync(object userState) {
            if ((this.getRelaTypesOperationCompleted == null)) {
                this.getRelaTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRelaTypesCompleted);
            }
            this.InvokeAsync("getRelaTypes", new object[0], this.getRelaTypesOperationCompleted, userState);
        }
        
        private void OngetRelaTypesCompleted(object arg) {
            if ((this.getRelaTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRelaTypesCompleted(this, new getRelaTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getTermTypesReturn")]
        public string[] getTermTypes() {
            object[] results = this.Invoke("getTermTypes", new object[0]);
            return ((string[])(results[0]));
        }
        
        public System.IAsyncResult BegingetTermTypes(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getTermTypes", new object[0], callback, asyncState);
        }
        
        public string[] EndgetTermTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        public void getTermTypesAsync() {
            this.getTermTypesAsync(null);
        }
        
        public void getTermTypesAsync(object userState) {
            if ((this.getTermTypesOperationCompleted == null)) {
                this.getTermTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTermTypesCompleted);
            }
            this.InvokeAsync("getTermTypes", new object[0], this.getTermTypesOperationCompleted, userState);
        }
        
        private void OngetTermTypesCompleted(object arg) {
            if ((this.getTermTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTermTypesCompleted(this, new getTermTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getSplSetIdReturn")]
        public string[] getSplSetId(string rxcui) {
            object[] results = this.Invoke("getSplSetId", new object[] {
                        rxcui});
            return ((string[])(results[0]));
        }
        
        public System.IAsyncResult BegingetSplSetId(string rxcui, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getSplSetId", new object[] {
                        rxcui}, callback, asyncState);
        }
        
        public string[] EndgetSplSetId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        public void getSplSetIdAsync(string rxcui) {
            this.getSplSetIdAsync(rxcui, null);
        }
        
        public void getSplSetIdAsync(string rxcui, object userState) {
            if ((this.getSplSetIdOperationCompleted == null)) {
                this.getSplSetIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSplSetIdCompleted);
            }
            this.InvokeAsync("getSplSetId", new object[] {
                        rxcui}, this.getSplSetIdOperationCompleted, userState);
        }
        
        private void OngetSplSetIdCompleted(object arg) {
            if ((this.getSplSetIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSplSetIdCompleted(this, new getSplSetIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("findRemappedReturn")]
        public string[] findRemapped(string rxcui) {
            object[] results = this.Invoke("findRemapped", new object[] {
                        rxcui});
            return ((string[])(results[0]));
        }
        
        public System.IAsyncResult BeginfindRemapped(string rxcui, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("findRemapped", new object[] {
                        rxcui}, callback, asyncState);
        }
        
        public string[] EndfindRemapped(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        public void findRemappedAsync(string rxcui) {
            this.findRemappedAsync(rxcui, null);
        }
        
        public void findRemappedAsync(string rxcui, object userState) {
            if ((this.findRemappedOperationCompleted == null)) {
                this.findRemappedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindRemappedCompleted);
            }
            this.InvokeAsync("findRemapped", new object[] {
                        rxcui}, this.findRemappedOperationCompleted, userState);
        }
        
        private void OnfindRemappedCompleted(object arg) {
            if ((this.findRemappedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.findRemappedCompleted(this, new findRemappedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://db.rxnorm.nlm.nih.gov", ResponseNamespace="http://mor.nlm.nih.gov/axis/services/RxNormDBService")]
        [return: System.Xml.Serialization.SoapElement("getSourceTypesReturn")]
        public string[] getSourceTypes() {
            object[] results = this.Invoke("getSourceTypes", new object[0]);
            return ((string[])(results[0]));
        }
        
        public System.IAsyncResult BegingetSourceTypes(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getSourceTypes", new object[0], callback, asyncState);
        }
        
        public string[] EndgetSourceTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        public void getSourceTypesAsync() {
            this.getSourceTypesAsync(null);
        }
        
        public void getSourceTypesAsync(object userState) {
            if ((this.getSourceTypesOperationCompleted == null)) {
                this.getSourceTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSourceTypesCompleted);
            }
            this.InvokeAsync("getSourceTypes", new object[0], this.getSourceTypesOperationCompleted, userState);
        }
        
        private void OngetSourceTypesCompleted(object arg) {
            if ((this.getSourceTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSourceTypesCompleted(this, new getSourceTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:BeanService")]
    public partial class RxMatchInfo {
        
        /// <remarks/>
        public int RANK;
        
        /// <remarks/>
        public string RXAUI;
        
        /// <remarks/>
        public string RXCUI;
        
        /// <remarks/>
        public int SCORE;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:BeanService")]
    public partial class RxTermInfo {
        
        /// <remarks/>
        public string CODE;
        
        /// <remarks/>
        public string RXCUI;
        
        /// <remarks/>
        public string SAB;
        
        /// <remarks/>
        public string STR;
        
        /// <remarks/>
        public string TTY;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:BeanService")]
    public partial class RxConcept {
        
        /// <remarks/>
        public string CUI;
        
        /// <remarks/>
        public string LAT;
        
        /// <remarks/>
        public string RXCUI;
        
        /// <remarks/>
        public string STR;
        
        /// <remarks/>
        public string SUPPRESS;
        
        /// <remarks/>
        public string SY;
        
        /// <remarks/>
        public string TTY;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:BeanService")]
    public partial class RxConceptGroup {
        
        /// <remarks/>
        public RxConcept[] rxConcept;
        
        /// <remarks/>
        public string type;
    }
    
    public delegate void closeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public partial class approxMatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal approxMatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RxMatchInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RxMatchInfo[])(this.results[0]));
            }
        }
    }
    
    public delegate void approxMatchCompletedEventHandler(object sender, approxMatchCompletedEventArgs args);
    
    public partial class getDisplayTermsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDisplayTermsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    public delegate void getDisplayTermsCompletedEventHandler(object sender, getDisplayTermsCompletedEventArgs args);
    
    public partial class getRxNormVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRxNormVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void getRxNormVersionCompletedEventHandler(object sender, getRxNormVersionCompletedEventArgs args);
    
    public partial class getUMLSVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUMLSVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void getUMLSVersionCompletedEventHandler(object sender, getUMLSVersionCompletedEventArgs args);
    
    public partial class getSpellingSuggestionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSpellingSuggestionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    public delegate void getSpellingSuggestionsCompletedEventHandler(object sender, getSpellingSuggestionsCompletedEventArgs args);
    
    public partial class findRxcuiByStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal findRxcuiByStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    public delegate void findRxcuiByStringCompletedEventHandler(object sender, findRxcuiByStringCompletedEventArgs args);
    
    public partial class findRxcuiByStringCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal findRxcuiByStringCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
//    public delegate void findRxcuiByStringCompletedEventHandler(object sender, findRxcuiByStringCompletedEventArgs1 args);
    
    public partial class findRxcuiByStringCompletedEventArgs2 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal findRxcuiByStringCompletedEventArgs2(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
//    public delegate void findRxcuiByStringCompletedEventHandler(object sender, findRxcuiByStringCompletedEventArgs2 args);
    
    public partial class getProprietaryInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProprietaryInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RxTermInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RxTermInfo[])(this.results[0]));
            }
        }
    }
    
    public delegate void getProprietaryInformationCompletedEventHandler(object sender, getProprietaryInformationCompletedEventArgs args);
    
    public partial class getProprietaryInformationCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProprietaryInformationCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RxTermInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RxTermInfo[])(this.results[0]));
            }
        }
    }
    
//    public delegate void getProprietaryInformationCompletedEventHandler(object sender, getProprietaryInformationCompletedEventArgs1 args);
    
    public partial class findRxcuiByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal findRxcuiByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    public delegate void findRxcuiByIdCompletedEventHandler(object sender, findRxcuiByIdCompletedEventArgs args);
    
    public partial class findRxcuiByIdCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal findRxcuiByIdCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
//    public delegate void findRxcuiByIdCompletedEventHandler(object sender, findRxcuiByIdCompletedEventArgs1 args);
    
    public partial class getRxConceptPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRxConceptPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RxConcept Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RxConcept)(this.results[0]));
            }
        }
    }
    
    public delegate void getRxConceptPropertiesCompletedEventHandler(object sender, getRxConceptPropertiesCompletedEventArgs args);
    
    public partial class getRelatedByRelationshipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRelatedByRelationshipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RxConceptGroup[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RxConceptGroup[])(this.results[0]));
            }
        }
    }
    
    public delegate void getRelatedByRelationshipCompletedEventHandler(object sender, getRelatedByRelationshipCompletedEventArgs args);
    
    public partial class getRelatedByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRelatedByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RxConceptGroup[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RxConceptGroup[])(this.results[0]));
            }
        }
    }
    
    public delegate void getRelatedByTypeCompletedEventHandler(object sender, getRelatedByTypeCompletedEventArgs args);
    
    public partial class getAllRelatedInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllRelatedInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RxConceptGroup[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RxConceptGroup[])(this.results[0]));
            }
        }
    }
    
    public delegate void getAllRelatedInfoCompletedEventHandler(object sender, getAllRelatedInfoCompletedEventArgs args);
    
    public partial class getMultiIngredBrandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMultiIngredBrandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RxConcept[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RxConcept[])(this.results[0]));
            }
        }
    }
    
    public delegate void getMultiIngredBrandCompletedEventHandler(object sender, getMultiIngredBrandCompletedEventArgs args);
    
    public partial class getDrugsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDrugsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RxConceptGroup[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RxConceptGroup[])(this.results[0]));
            }
        }
    }
    
    public delegate void getDrugsCompletedEventHandler(object sender, getDrugsCompletedEventArgs args);
    
    public partial class getNDCsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNDCsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    public delegate void getNDCsCompletedEventHandler(object sender, getNDCsCompletedEventArgs args);
    
    public partial class getQuantityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getQuantityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void getQuantityCompletedEventHandler(object sender, getQuantityCompletedEventArgs args);
    
    public partial class getUNIICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUNIICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void getUNIICompletedEventHandler(object sender, getUNIICompletedEventArgs args);
    
    public partial class getStrengthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getStrengthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void getStrengthCompletedEventHandler(object sender, getStrengthCompletedEventArgs args);
    
    public partial class getIdTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getIdTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    public delegate void getIdTypesCompletedEventHandler(object sender, getIdTypesCompletedEventArgs args);
    
    public partial class getRelaTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRelaTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    public delegate void getRelaTypesCompletedEventHandler(object sender, getRelaTypesCompletedEventArgs args);
    
    public partial class getTermTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTermTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    public delegate void getTermTypesCompletedEventHandler(object sender, getTermTypesCompletedEventArgs args);
    
    public partial class getSplSetIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSplSetIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    public delegate void getSplSetIdCompletedEventHandler(object sender, getSplSetIdCompletedEventArgs args);
    
    public partial class findRemappedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal findRemappedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    public delegate void findRemappedCompletedEventHandler(object sender, findRemappedCompletedEventArgs args);
    
    public partial class getSourceTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSourceTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    public delegate void getSourceTypesCompletedEventHandler(object sender, getSourceTypesCompletedEventArgs args);
}
