{"Name":"Progress HUD","Id":413,"Alias":"mbprogresshud","Description":"Progress HUD (a.k.a. MBProgressHUD) is a translucent, HUD-style dialog\nthat shows a progress indicator and a status label. It\u0027s the perfect\ncontrol for giving the user feedback when work is being done in a\nbackground thread.\n\nHere\u0027s an example:\n\n```csharp\nusing MBProgressHUD;\n...\n\npublic override void ViewDidLoad ()\n{\n\tbase.ViewDidLoad ();\n\n\tvar hud = new MTMBProgressHUD (View) {\n\t\tLabelText = \"Waiting...\",\n\t\tRemoveFromSuperViewOnHide = true\n\t};\n\n\tView.AddSubview (hud);\n\t\t\n\thud.Show (animated: true);\n\thud.Hide (animated: true, delay: 5);\n}\n```\n\n*Some component screenshots assembled with [PlaceIt](http://placeit.breezi.com/).*\n","Version":"0.8","Summary":"A translucent, HUD-style dialog that shows a progress indicator and a status label.","QuickStart":"Progress HUD (a.k.a. MBProgressHUD) is a translucent, HUD-style dialog\nthat shows a progress indicator and a status label. It\u0027s the perfect\ncontrol for giving the user feedback when work is being done in a\nbackground thread.\n\nHere\u0027s an example:\n\n```csharp\nusing MBProgressHUD;\n...\n\npublic override void ViewDidLoad ()\n{\n\tbase.ViewDidLoad ();\n\t\n\tvar hud = new MTMBProgressHUD (View) {\n\t\tLabelText = \"Waiting...\",\n\t\tRemoveFromSuperViewOnHide = true\n\t};\n\n\tView.AddSubview (hud);\n\t\t\n\thud.Show (animated: true);\n\thud.Hide (animated: true, delay: 5);\n}\n```\n\n## Details\n\nThe main guideline you need to follow when dealing with MBProgressHUD while running long-running\ntasks is keeping the main thread work-free, so the UI can be updated promptly. This is accomplished\nby using MBProgressHUD on the main thread to show progress, while running heavy tasks on a\nbackground thread.\n","Hash":"ce432959547bc90ee2ce15b8ead273d5","TargetPlatforms":["ios"],"TrialHash":null}