// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Example_TableAndCellStyles.Code.CustomCells {
	
	
	// Base type probably should be UIKit.UIViewController or subclass
	[Foundation.Register("CustomCellController1")]
	public partial class CustomCellController1 {
		
		private UIKit.UITableViewCell __mt_celMain;
		
		private UIKit.UIImageView __mt_imgMain;
		
		private UIKit.UILabel __mt_lblHeading;
		
		private UIKit.UILabel __mt_lblSubHeading;
		
		#pragma warning disable 0169
		[Foundation.Connect("celMain")]
		private UIKit.UITableViewCell celMain {
			get {
				this.__mt_celMain = ((UIKit.UITableViewCell)(this.GetNativeField("celMain")));
				return this.__mt_celMain;
			}
			set {
				this.__mt_celMain = value;
				this.SetNativeField("celMain", value);
			}
		}
		
		[Foundation.Connect("imgMain")]
		private UIKit.UIImageView imgMain {
			get {
				this.__mt_imgMain = ((UIKit.UIImageView)(this.GetNativeField("imgMain")));
				return this.__mt_imgMain;
			}
			set {
				this.__mt_imgMain = value;
				this.SetNativeField("imgMain", value);
			}
		}
		
		[Foundation.Connect("lblHeading")]
		private UIKit.UILabel lblHeading {
			get {
				this.__mt_lblHeading = ((UIKit.UILabel)(this.GetNativeField("lblHeading")));
				return this.__mt_lblHeading;
			}
			set {
				this.__mt_lblHeading = value;
				this.SetNativeField("lblHeading", value);
			}
		}
		
		[Foundation.Connect("lblSubHeading")]
		private UIKit.UILabel lblSubHeading {
			get {
				this.__mt_lblSubHeading = ((UIKit.UILabel)(this.GetNativeField("lblSubHeading")));
				return this.__mt_lblSubHeading;
			}
			set {
				this.__mt_lblSubHeading = value;
				this.SetNativeField("lblSubHeading", value);
			}
		}
	}
}
